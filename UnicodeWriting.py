L1 =['░█████╗░', '░░███╗░░','██████╗░','██████╗░','░░██╗██╗','███████╗','░█████╗░','███████╗','░█████╗░', '░█████╗░', '░█████╗░','██████╗░','░█████╗░','██████╗░','███████╗','███████╗','░██████╗░','██╗░░██╗', '██╗','░░░░░██╗','██╗░░██╗','██╗░░░░░','███╗░░░███╗','███╗░░██╗','░█████╗░','██████╗░', '░██████╗░','██████╗░','░██████╗','████████╗','██╗░░░██╗','██╗░░░██╗','░██╗░░░░░░░██╗','██╗░░██╗', '██╗░░░██╗','███████╗']
L2 = ['██╔══██╗', '░████║░░', '╚════██╗', '╚════██╗', '░██╔╝██║', '██╔════╝', '██╔═══╝░', '╚════██║', '██╔══██╗', '██╔══██╗', '██╔══██╗', '██╔══██╗', '██╔══██╗', '██╔══██╗', '██╔════╝', '██╔════╝', '██╔════╝░', '██║░░██║', '██║', '░░░░░██║', '██║░██╔╝', '██║░░░░░', '████╗░████║', '████╗░██║', '██╔══██╗', '██╔══██╗', '██╔═══██╗', '██╔══██╗', '██╔════╝', '╚══██╔══╝', '██║░░░██║', '██║░░░██║', '░██║░░██╗░░██║', '╚██╗██╔╝', '╚██╗░██╔╝',
'╚════██║']
L3 = ['██║░░██║', '██╔██║░░', '░░███╔═╝', '░█████╔╝', '██╔╝░██║', '██████╗░', '██████╗░', '░░░░██╔╝', '╚█████╔╝', '╚██████║', '███████║', '██████╦╝', '██║░░╚═╝', '██║░░██║', '█████╗░░', '█████╗░░', '██║░░██╗░', '███████║', '██║', '░░░░░██║', '█████═╝░', '██║░░░░░', '██╔████╔██║', '██╔██╗██║', '██║░░██║', '██████╔╝', '██║██╗██║', '██████╔╝', '╚█████╗░', '░░░██║░░░', '██║░░░██║', '╚██╗░██╔╝', '░╚██╗████╗██╔╝', '░╚███╔╝░', '░╚████╔╝░',
'░░███╔═╝']
L4 = ['██║░░██║', '╚═╝██║░░', '██╔══╝░░', '░╚═══██╗', '███████║', '╚════██╗', '██╔══██╗', '░░░██╔╝░', '██╔══██╗', '░╚═══██║', '██╔══██║', '██╔══██╗', '██║░░██╗', '██║░░██║', '██╔══╝░░', '██╔══╝░░', '██║░░╚██╗', '██╔══██║', '██║', '██╗░░██║', '██╔═██╗░', '██║░░░░░', '██║╚██╔╝██║', '██║╚████║', '██║░░██║', '██╔═══╝░', '╚██████╔╝', '██╔══██╗', '░╚═══██╗', '░░░██║░░░', '██║░░░██║', '░╚████╔╝░', '░░████╔═████║░', '░██╔██╗░', '░░╚██╔╝░░',
'██╔══╝░░']
L5 = ['╚█████╔╝', '███████╗', '███████╗', '██████╔╝', '╚════██║', '██████╔╝', '╚█████╔╝', '░░██╔╝░░', '╚█████╔╝', '░█████╔╝', '██║░░██║', '██████╦╝', '╚█████╔╝', '██████╔╝', '███████╗', '██║░░░░░', '╚██████╔╝', '██║░░██║', '██║', '╚█████╔╝', '██║░╚██╗', '███████╗', '██║░╚═╝░██║', '██║░╚███║', '╚█████╔╝', '██║░░░░░', '░╚═██╔═╝░', '██║░░██║', '██████╔╝', '░░░██║░░░', '╚██████╔╝', '░░╚██╔╝░░', '░░╚██╔╝░╚██╔╝░', '██╔╝╚██╗', '░░░██║░░░',
'███████╗']
L6 = ['░╚════╝░', '╚══════╝', '╚══════╝', '╚═════╝░', '░░░░░╚═╝', '╚═════╝░', '░╚════╝░', '░░╚═╝░░░', '░╚════╝░', '░╚════╝░', '╚═╝░░╚═╝', '╚═════╝░', '░╚════╝░', '╚═════╝░', '╚══════╝', '╚═╝░░░░░', '░╚═════╝░', '╚═╝░░╚═╝', '╚═╝', '░╚════╝░', '╚═╝░░╚═╝', '╚══════╝', '╚═╝░░░░░╚═╝', '╚═╝░░╚══╝', '░╚════╝░', '╚═╝░░░░░', '░░░╚═╝░░░', '╚═╝░░╚═╝', '╚═════╝░', '░░░╚═╝░░░', '░╚═════╝░', '░░░╚═╝░░░', '░░░╚═╝░░░╚═╝░░', '╚═╝░░╚═╝', '░░░╚═╝░░░',
'╚══════╝']
keys = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']
import re
def create_print(one,two,three,four,five,six):
    foo = '{}\n{}\r\n{}\r\n{}\r\n{}\r\n{}\n'.format(one,two,three,four,five,six)
    bar = "".join(foo.splitlines(True))
    return bar
# ix = 13
# print(create_cool_character(L1[ix:ix+6],L2[ix:ix+6],L3[ix:ix+6],L4[ix:ix+6],L5[ix:ix+6],L6[ix:ix+6]))
#x = input("Enter a word:   ")
def create_cool(x):
    sp = " "
    x = x.upper()
    for layer in [L1,L2,L3,L4,L5,L6]:
        try:
            _temp = [layer[keys.index(i)] for i in x if not bool(re.match("[\s]+",i))]
        except ValueError as err:
            yield str(err) + ":  character not convertable(check encoding or current working characters)"
            return
        for letter in x:
            if bool(re.match("[\s]+",letter)):
                yield sp
            elif layer == L1:
                yield sp+layer[keys.index(letter)]
            else:
                yield layer[keys.index(letter)]+sp
        yield "\n"
def execute(word):
    return " ".join(list(create_cool(word)))
#print(execute("Joachim"))
def execute_input():
    """some restricitons may apply as this is"""
    word = input("Enter a word to dank up:  ")
    print(" ".join(list(create_cool(word))))

# import pyautogui as p


# def get_active_pos():
#     print('press keboard interrupt to exit')
#     try:
#         while True:
#             x, y = p.position()
#             positionStr = execute("x  " + str(x).rjust(2)+"     "+ "y  "+str(y).rjust(2))
#             print(positionStr, end="")
#             print("\b\n\r" * len(positionStr), end="", flush=True)#flush() just to ignore buffer
#     except KeyboardInterrupt:
#         print("\n")

#get_active_pos()

# ██╗  ░█████╗░  ██╗░░  ░░██╗  ██╗██╗  ██╗  ██╗  ████╗
# ██║  ██╔══██╗  ╚██╗░  ░██╔╝  ╚█║╚█║  ╚═╝  ╚═╝  ╚═██║
# ██║  ╚═╝███╔╝  ░╚██╗  ██╔╝░  ░╚╝░╚╝  ░░░  ░░░  ░░██║
# ╚═╝  ░░░╚══╝░  ░██╔╝  ╚██╗░  ░░░░░░  ░░░  ██╗  ░░██║
# ██╗  ░░░██╗░░  ██╔╝░  ░╚██╗  ░░░░░░  ██╗  ╚█║  ████║
# ╚═╝  ░░░╚═╝░░  ╚═╝░░  ░░╚═╝  ░░░░░░  ╚═╝  ░╚╝  ╚═══╝
 
# ████╗  ░░░░██╗  ░░░░░░░  ░░░░░░  ░░░░░░░  ░░░  ░░░ 
# ██╔═╝  ░░░██╔╝  ░░██╗░░  ░░░░░░  ██████╗  ░░░  ░░░
# ██║░░  ░░██╔╝░  ██████╗  █████╗  ╚═════╝  ░░░  ░░░
# ██║░░  ░██╔╝░░  ╚═██╔═╝  ╚════╝  ██████╗  ░░░  ██╗
# ████╗  ██╔╝░░░  ░░╚═╝░░  ░░░░░░  ╚═════╝  ██╗  ╚█║
# ╚═══╝  ╚═╝░░░░  ░░░░░░░  ░░░░░░  ░░░░░░░  ╚═╝  ░╚╝ 
# ░░░██╗░██╗░
# ██████████╗
# ╚═██╔═██╔═╝
# ██████████╗
# ╚██╔═██╔══╝
# ░╚═╝░╚═╝░░░